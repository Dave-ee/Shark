--[[

	Shark
	Draft 4
	
	PLAN FOR FUTURE:
		- UI
			- Menu (History, Settings, About, Errors, Exit)
		- Local Storage
			- Shark Pages
				- Home
				- Settings
			- Sites (Client/Server)
		- Site Handler
			- Each site has a handler that has sent parameters to go through it
				- This means that any text the client throws at the server gets put
				  through the handler so that the site can do something based on
				  what the client put in (login screens, remote access etc.)
		- Error Codes
			- 1: Site not found [DONE]
			- 2: Page not found [DONE]
			- 3: Host didn't respond (doesn't exist or Shark not running)
			- 4: Host requires certificate from client
			- 5: Host denied certificate from client
			- 6: DNS couldn't resolve hostname
			- 10: Shark Page corrupted
--]]

local SHARKLE = "local://home/"

local SHARK_VERSION = "DRAFT 4"
local SHARK_RUNNING = true

local SHARK_PATH = "/sharkfs/"
local SHARK_PATH_CONFIG = SHARK_PATH.."config/"
local SHARK_PATH_SITES = SHARK_PATH.."sites/"
local SHARK_PATH_HISTORY = SHARK_PATH_CONFIG.."history"
local SHARK_PATH_SETTINGS = SHARK_PATH_CONFIG.."settings"
local SHARK_PATH_CERTS = SHARK_PATH_CONFIG.."certs"
local SHARK_PATH_DNS = SHARK_PATH_CONFIG.."dns"
local SHARK_PATH_LOG = SHARK_PATH_CONFIG.."log"
local SHARK_PATH_MD5 = SHARK_PATH_CONFIG.."md5"

local tm_WIDTH,tm_HEIGHT = term.getSize()
local tm_DEFAULT = term.current()
local tm_SHARK = window.create(tm_DEFAULT,1,1,tm_WIDTH,3,true)
local tm_PAGE = window.create(tm_DEFAULT,1,4,tm_WIDTH,tm_HEIGHT-3,true)
local tm_MENU = window.create(tm_DEFAULT,tm_WIDTH-10,4,11,tm_HEIGHT,true)

local MD5 = dofile(SHARK_PATH_MD5)

local FIELDS = {}

local CHECKSUMS = {
	["errors"] = "f12ee94ca17f2203c53d6eedb128cea4",
	["about"] = "e9ade7b9b81cad7305749df01589a536",
	["not-found"] = "2ef0e9f3eab069404abd34064b4f58f5",
	["home"] = "fa99ea6cc88d2e0b5e5cb3658327e1e8",
	["help"] = "4f851d445cd5d3db2b76f95d5503f28f"
}

local LOCALS = {
	["COMMAND"] = nil,
	["COMMAND_LAST"] = nil,
	["ERRORS"] = {},
	["SHARKLE_LAST"] = SHARKLE,
	["SHARKLE_INPUT"] = false,
	["SHARKLE_HOME"] = "local://home/",
	["SHARKLE_HELP"] = "local://help/",
	["SHARKLE_ABOUT"] = "local://about/",
	["SHARKLE_ERRORS"] = "local://errors/",
	["SHARKLE_CORRUPT"] = "local://corrupt/",
	["SHARKLE_HISTORY"] = "local://history/",
	["SHARKLE_NOTFOUND"] = "local://not-found/",
	["SHARKLE_SETTINGS"] = "local://settings/",
	["SHARKLE_THEMES"] = "local://themes/",
	["MENU_ACTIVE"] = false,
}

local COLOURS = {
	["BAR"] = {
		bg = colors.cyan,
		fg = colors.gray
	},
	["SHARKLE"] = {
		bg = colors.lightGray,
		fg = colors.white,
		clear = colors.red,
		enter = colors.lime
	},
	["PAGE"] = {
		bg = colors.white,
		fg = colors.black,
		fg2 = colors.gray,
		header = colors.cyan,
		error = colors.red
	},
	["MENU"] = {
		bg = colors.cyan,
		fg = colors.white,
		fg2 = colors.gray,
		exit = colors.red
	}
}

local GLOBALS = {
	["color"] = {
		STACK_TC = { term.getTextColor() },
		STACK_BC = { term.getBackgroundColor() }
	},
	["cursor"] = {
		STACK_X = { term.getCursorPos() },
		STACK_Y = { select(2,term.getCursorPos()) }
	},
	["print"] = {
		SWITCH = false,
		X = 0,
		Y = 0
	},
	["write"] = {
		SWITCH = false,
		X = 0,
		Y = 0
	},
	["button"] = {
		SWITCH = false,
		OLD_X = 0,
		OLD_Y = 0,
		X = 0,
		Y = 0,
		W = 0,
		H = 0,
		LINK = "",
		COUNT = 1
	}
}

local COMMANDS = {
	["clear"] = {
		FUNCTION = function(t)
			local _c = colors[t[1]] or term.getBackgroundColor()
			term.setBackgroundColor(_c)
			term.clear()
			return true
		end
	},
	["clearLine"] = {
		FUNCTION = function()
			local _c = colors[t[1]] or term.getBackgroundColor()
			term.setBackgroundColor(_c)
			term.clearLine()
			return true
		end
	},
	["print"] = {
		FUNCTION = function(t)
			GLOBALS["print"].SWITCH = true
			local _X,_Y = 0, 0
			if #t > 0 then
				_X,_Y = unpack(t)
				term.setCursorPos(tonumber(_X),tonumber(_Y))
			end
			GLOBALS["print"].X,GLOBALS["print"].Y = term.getCursorPos()
			return true
		end,
		CON_FUNCTION = function(s)
			local _X,_Y = term.getCursorPos()
			term.setCursorPos(GLOBALS["print"].X,_Y)
			print(s)
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["print"].SWITCH = false
			GLOBALS["print"].X = 0
			GLOBALS["print"].Y = 0
			return true
		end
	},
	["write"] = {
		FUNCTION = function(t)
			local _X,_Y = 0, 0
			if #t > 0 then
				_X,_Y = unpack(t)
				term.setCursorPos(tonumber(_X),tonumber(_Y))
			end
			GLOBALS["write"].X,GLOBALS["write"].Y = term.getCursorPos()
			return true
		end,
		CON_FUNCTION = function(s)
			write(s)
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["write"].SWITCH = false
			GLOBALS["write"].X = 0
			GLOBALS["write"].Y = 0
			return true
		end
	},
	["button"] = {
		FUNCTION = function(t)
			GLOBALS["button"].SWITCH = true
			local _X,_Y,_W,_H,_LINK = unpack(t)
			GLOBALS["button"].X = tonumber(_X)
			GLOBALS["button"].Y = tonumber(_Y)
			if tonumber(_W) then
				GLOBALS["button"].W = tonumber(_W)
				GLOBALS["button"].H = tonumber(_H)
				GLOBALS["button"].LINK = _LINK
				paintutils.drawFilledBox(GLOBALS["button"].X,GLOBALS["button"].Y,GLOBALS["button"].X+GLOBALS["button"].W-1,GLOBALS["button"].Y+GLOBALS["button"].H-1,term.getBackgroundColor())
			else
				GLOBALS["button"].W = 0
				GLOBALS["button"].H = 0
				GLOBALS["button"].LINK = _W
			end
			GLOBALS["button"].OLD_X,GLOBALS["button"].OLD_Y = term.getCursorPos()
			return true
		end,
		CON_FUNCTION = function(s)
			local _X,_Y = GLOBALS["button"].X,GLOBALS["button"].Y
			if GLOBALS["button"].W == 0 then
				GLOBALS["button"].W = #s+2
				local _W = GLOBALS["button"].W
				term.setCursorPos(_X,_Y)
				print(string.rep(" ",_W))
				term.setCursorPos(_X,_Y+1)
				print(" "..s.." ")
				term.setCursorPos(_X,_Y+2)
				print(string.rep(" ",_W))
			else
				term.setCursorPos(_X+1,_Y+GLOBALS["button"].COUNT)
				print(s)
				GLOBALS["button"].COUNT = GLOBALS["button"].COUNT + 1
			end
			return true
		end,
		INV_FUNCTION = function()
			local _T = {
				X = GLOBALS["button"].X,
				Y = GLOBALS["button"].Y,
				XE = GLOBALS["button"].X + GLOBALS["button"].W - 1,
				YE = GLOBALS["button"].Y + GLOBALS["button"].H - 1,
				FUNCTION = function() 
					SHARKLE = GLOBALS["button"].LINK 
				end
			}
			table.insert(FIELDS,_T)
			GLOBALS["button"].SWITCH = false
			GLOBALS["button"].OLD_X = 0
			GLOBALS["button"].OLD_Y = 0
			GLOBALS["button"].X = 0
			GLOBALS["button"].Y = 0
			GLOBALS["button"].W = 0
			GLOBALS["button"].H = 0
			GLOBALS["button"].LINK = ""
			GLOBALS["button"].COUNT = 1
			return true
		end
	},
	["color"] = {
		FUNCTION = function(t)
			if #t > 1 then
				GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC + 1] = colors[t[1]]
				GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC + 1] = colors[t[2]]
				term.setTextColor(colors[t[1]])
				term.setBackgroundColor(colors[t[2]])
			else
				GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC + 1] = colors[t[1]]
				GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC + 1] = term.getBackgroundColor()
				term.setTextColor(colors[t[1]])
			end
			return true
		end,
		INV_FUNCTION = function()
			if #GLOBALS["color"].STACK_TC > 1 then
				GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC] = nil
				GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC] = nil
				term.setTextColor(GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC])
				term.setBackgroundColor(GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC])
			end
			return true
		end
	},
	["cursor"] = {
		FUNCTION = function(t)
			local _X,_Y = unpack(t)
			GLOBALS["cursor"].STACK_X[#GLOBALS["cursor"].STACK_X + 1] = tonumber(_X)
			GLOBALS["cursor"].STACK_Y[#GLOBALS["cursor"].STACK_Y + 1] = tonumber(_Y)
			term.setCursorPos(tonumber(_X),tonumber(_Y))
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["cursor"].STACK_X[#GLOBALS["cursor"].STACK_X] = nil
			GLOBALS["cursor"].STACK_Y[#GLOBALS["cursor"].STACK_Y] = nil
			term.setCursorPos(GLOBALS["cursor"].STACK_X[#GLOBALS["cursor"].STACK_X],GLOBALS["cursor"].STACK_Y[#GLOBALS["cursor"].STACK_Y])
			return true
		end
	},
}

-- Log error to file
-- Arguments: TYPE (String), ERROR (String, LINE (Number)
-- Returns: SUCCESS (True/False)
local function f_LOG(_T,_S,_L)
	local s_TIME = textutils.formatTime(os.time(),true)
	if _T == "ERROR" then
		local _f = fs.open(SHARK_PATH_LOG,"a")
		_f.writeLine("--- START ERROR ---")
		_f.writeLine("Time: "..s_TIME)
		_f.writeLine("Sharkle: "..SHARKLE)
		if _L then
			_f.writeLine("Line: ".._L)
		end
		_f.writeLine("Error: ".._S)
		_f.writeLine("--- END ERROR ---")
		_f.close()
		return true
	elseif _T == "PAGE_ERROR" then
		local _f = fs.open(SHARK_PATH_LOG,"a")
		_f.writeLine("["..LOCALS["SHARKLE_LAST"].."]:".._L..": ".._S)
		_f.close()
		return true
	elseif _T == "HISTORY" then
		local _f = fs.open(SHARK_PATH_HISTORY,"a")
		_f.writeLine("["..s_TIME.."] "..SHARKLE)
		_f.close()
		return true
	end
	return false
end

-- Resolve name from DNS 
-- Arguments: Name (String)
-- Returns: Self (True/False), ID (Computer ID)
local function f_RESOLVE_NAME(s)
	local b_SELF = false
	if not tonumber(s) then
		if s == "local" or s == "localhost" then
			b_SELF = true
			n_ID = os.getComputerID()
		else
			local _f = fs.open(SHARK_PATH_DNS,"r")
			local t_DNS = textutils.unseralize(_f.readAll())
			if t_DNS[s] and tonumber(t_DNS[s]) then
				n_ID = tonumber(t_DNS[s])
				if n_ID == os.getComputerID() then
					b_SELF = true
				end
			else
				n_ID = false
			end
		end
	else
		if tonumber(s) == os.getComputerID() then
			b_SELF = true
			n_ID = os.getComputerID()
		else
			n_ID = tonumber(s)
		end
	end
	return b_SELF,n_ID
end

-- Draw Sharkle
-- Arguments: Nil
-- Returns: Nil
local function f_DRAW_SHARKLE()
	local _tm = term.current()
	term.redirect(tm_SHARK)
	term.setTextColor(COLOURS["SHARKLE"].fg)
	term.setBackgroundColor(COLOURS["SHARKLE"].bg)
	term.setCursorPos(2,2)
	print(string.rep(" ",tm_WIDTH-8))
	term.setCursorPos(2,2)
	if #SHARKLE > (tm_WIDTH-8) then
		print(SHARKLE:sub(1,tm_WIDTH-10).."..")
	else
		print(SHARKLE)
	end
	term.redirect(_tm)
end

-- Draw Shark Menu
-- Arguments: Nil
-- Returns: Nil
local function f_DRAW_MENU()
	local _tm = term.current()
	term.redirect(tm_SHARK)
	term.setCursorPos(tm_WIDTH-1,2)
	term.setTextColor(COLOURS["SHARKLE"].fg)
	term.setBackgroundColor(COLOURS["BAR"].bg)
	print(string.char(25))
	term.redirect(tm_MENU)
	term.setBackgroundColor(COLOURS["MENU"].bg)
	term.clear()
	term.setTextColor(COLOURS["MENU"].bg)
	term.setBackgroundColor(COLOURS["MENU"].fg)
	term.setCursorPos(2,2)
	print("         ")
	term.setCursorPos(2,3)
	print("  Shark  ")
	term.setCursorPos(2,4)
	print("         ")
	term.setTextColor(COLOURS["MENU"].fg2)
	term.setBackgroundColor(COLOURS["MENU"].bg)
	term.setCursorPos(2,6)
	print("  About  ")
	term.setCursorPos(2,7)
	print("  Theme  ")
	term.setCursorPos(2,8)
	print(" History ")
	term.setCursorPos(2,9)
	print(" Options ")
	term.setCursorPos(2,10)
	print(" Help Me ")
	term.setCursorPos(2,13)
	write("Errors: ")
	local n_ERRORS = 0
	for k,v in pairs(LOCALS["ERRORS"]) do
		n_ERRORS = n_ERRORS + 1
	end
	if n_ERRORS > 9 then
		print(">9")
	else
		print(n_ERRORS)
	end
	term.setTextColor(COLOURS["MENU"].fg)
	term.setBackgroundColor(COLOURS["MENU"].exit)
	term.setCursorPos(2,15)
	print("    "..string.char(248).."    ")
	term.redirect(_tm)
end

-- Draw Shark UI
-- Arguments: Nil
-- Returns: Nil
local function f_DRAW_UI()
	term.redirect(tm_SHARK)
	term.setTextColor(COLOURS["BAR"].fg)
	term.setBackgroundColor(COLOURS["BAR"].bg)
	for i=1,3 do
		term.setCursorPos(1,i)
		term.clearLine()
	end
	term.setCursorPos(2,2)
	term.setTextColor(COLOURS["SHARKLE"].fg)
	term.setBackgroundColor(COLOURS["SHARKLE"].bg)
	write(string.rep(" ",tm_WIDTH-7))
	term.setTextColor(COLOURS["SHARKLE"].enter)
	write(string.char(17))
	term.setTextColor(COLOURS["SHARKLE"].clear)
	write(string.char(215))
	term.setTextColor(COLOURS["SHARKLE"].enter)
	write(string.char(16))
	f_DRAW_SHARKLE()
	term.redirect(tm_PAGE)
end

-- Toggle the Menu
-- Arguments: MANUAL (True/False)
-- Returns: True
local function f_TOGGLE_MENU(b)
	if b ~= nil then
		LOCALS["MENU_ACTIVE"] = b
	else
		LOCALS["MENU_ACTIVE"] = not LOCALS["MENU_ACTIVE"]
	end
	local _tm = term.current()
	if LOCALS["MENU_ACTIVE"] then
		term.redirect(tm_SHARK)
		term.setCursorPos(tm_WIDTH-1,2)
		term.setTextColor(COLOURS["SHARKLE"].fg)
		term.setBackgroundColor(COLOURS["BAR"].bg)
		print(string.char(25))
		f_DRAW_MENU()
	else
		term.redirect(tm_SHARK)
		term.setCursorPos(tm_WIDTH-1,2)
		term.setTextColor(COLOURS["SHARKLE"].fg)
		term.setBackgroundColor(COLOURS["BAR"].bg)
		print(string.char(27))
		tm_PAGE.redraw()
		tm_SHARK.redraw()
	end
	term.redirect(_tm)
	return true
end

-- Change Sharkle
-- Arguments: Sharkle (String)
-- Returns: exe_SHARKLE
local function f_CHANGE_SHARKLE(s)
	f_TOGGLE_MENU(false)
	LOCALS["SHARKLE_LAST"] = SHARKLE
	SHARKLE = s:lower()
	f_LOG("HISTORY",SHARKLE)
	return exe_SHARKLE(SHARKLE)
end

-- Replaces 'read' function
-- Arguments: Default (String)
-- Returns: Input (String)
local function f_INPUT()
	local _INPUT = SHARKLE
	local _X,_Y = term.getCursorPos()
	term.setCursorPos(_X+#_INPUT,_Y)
	term.setCursorBlink(true)
	while LOCALS["SHARKLE_INPUT"] do
		term.setCursorPos(_X+#_INPUT,_Y)
		local _EVENT = { os.pullEvent() }
		if _EVENT[1] == "char" then
			_INPUT = _INPUT.._EVENT[2]
			write(_EVENT[2])
		elseif _EVENT[1] == "key" then
			if _EVENT[2] == keys.backspace then
				if #_INPUT > 0 then
					_INPUT = _INPUT:sub(1,#_INPUT-1)
					local _X,_Y = term.getCursorPos()
					term.setCursorPos(_X-1,_Y)
					write(" ")
					term.setCursorPos(_X-1,_Y)
				end
			elseif _EVENT[2] == keys.enter then
				LOCALS["SHARKLE_INPUT"] = false
				term.setCursorBlink(false)
				f_CHANGE_SHARKLE(_INPUT)
				return _INPUT
			end
		elseif _EVENT[1] == "SHARKLE_GO" then
			LOCALS["SHARKLE_INPUT"] = false
			term.setCursorBlink(false)
			f_CHANGE_SHARKLE(_INPUT)
			return _INPUT
		elseif _EVENT[1] == "SHARKLE_STOP" then
			LOCALS["SHARKLE_INPUT"] = false
			term.setCursorBlink(false)
			return _INPUT
		elseif _EVENT[1] == "mouse_click" then
			if _EVENT[2] == 1 and _EVENT[3] == tm_WIDTH-4 and _EVENT[4] == 2 then
				local _tm = term.current()
				term.redirect(tm_SHARK)
				for i=1,#_INPUT do
					local _X,_Y = term.getCursorPos()
					term.setCursorPos(_X-1,_Y)
					write(" ")
					term.setCursorPos(_X-1,_Y)
				end
				_INPUT = ""
				term.redirect(_tm)
			else
				f_HANDLE_EVENT(_EVENT)
			end
		else
			f_HANDLE_EVENT(_EVENT)
		end
	end
end

-- Handle Sharkle events
-- Arguments: Event (Table)
-- Returns: SUCCESS (True/False)
function f_HANDLE_EVENT(_EVENT)
	if _EVENT[1] == "mouse_click" then
		if _EVENT[2] == 1 then
			if LOCALS["MENU_ACTIVE"] then
				if _EVENT[3] >= tm_WIDTH-10 and _EVENT[3] <= tm_WIDTH and _EVENT[4] == 9 then
					return f_CHANGE_SHARKLE(LOCALS["SHARKLE_ABOUT"])
				elseif _EVENT[3] >= tm_WIDTH-10 and _EVENT[3] <= tm_WIDTH and _EVENT[4] == 10 then
					return f_CHANGE_SHARKLE(LOCALS["SHARKLE_THEMES"])
				elseif _EVENT[3] >= tm_WIDTH-10 and _EVENT[3] <= tm_WIDTH and _EVENT[4] == 11 then
					return f_CHANGE_SHARKLE(LOCALS["SHARKLE_HISTORY"])
				elseif _EVENT[3] >= tm_WIDTH-10 and _EVENT[3] <= tm_WIDTH and _EVENT[4] == 12 then
					return f_CHANGE_SHARKLE(LOCALS["SHARKLE_SETTINGS"])
				elseif _EVENT[3] >= tm_WIDTH-10 and _EVENT[3] <= tm_WIDTH and _EVENT[4] == 13 then
					return f_CHANGE_SHARKLE(LOCALS["SHARKLE_HELP"])
				elseif _EVENT[3] >= tm_WIDTH-10 and _EVENT[3] <= tm_WIDTH and _EVENT[4] == 16 then
					return f_CHANGE_SHARKLE(LOCALS["SHARKLE_ERRORS"])
				elseif _EVENT[3] >= tm_WIDTH-9 and _EVENT[3] <= tm_WIDTH-1 and _EVENT[4] >= 5 and _EVENT[4] <= 7 then
					return f_CHANGE_SHARKLE(LOCALS["SHARKLE_HOME"])
				elseif _EVENT[3] >= tm_WIDTH-9 and _EVENT[3] <= tm_WIDTH-1 and _EVENT[4] == 18 then
					SHARK_RUNNING = false
					return true
				end
			end
			if _EVENT[3] >= 2 and _EVENT[3] <= tm_WIDTH-8 and _EVENT[4] == 2 then
				if not LOCALS["SHARKLE_INPUT"] then
					LOCALS["SHARKLE_INPUT"] = true
					local _tm = term.current()
					term.redirect(tm_SHARK)
					term.setTextColor(COLOURS["SHARKLE"].fg)
					term.setBackgroundColor(COLOURS["SHARKLE"].bg)
					term.setCursorPos(2,2)
					SHARKLE = f_INPUT()
					term.redirect(_tm)
				end
				return true
			elseif _EVENT[3] == tm_WIDTH-1 and _EVENT[4] == 2 then
				return f_TOGGLE_MENU()
			elseif _EVENT[3] == tm_WIDTH-5 and _EVENT[4] == 2 then
				return f_CHANGE_SHARKLE(LOCALS["SHARKLE_LAST"])
			elseif _EVENT[3] == tm_WIDTH-3 and _EVENT[4] == 2 then
				os.queueEvent("SHARKLE_GO")
				return true
			else
				os.queueEvent("SHARKLE_STOP")
				return false
			end
		end
	elseif _EVENT[1] == "rednet_message" then
		if _EVENT[3].prot and _EVENT[3].prot == "SHARK" then
			if fs.exists(SHARK_PATH_SITES.._EVENT[3].site) and fs.isDir(SHARK_PATH_SITES.._EVENT[3].site) then
				if fs.exists(SHARK_PATH_SITES.._EVENT[3].site.."/pages/".._EVENT[3].path..".".._EVENT[3].ext) then
					local _f = fs.open(SHARK_PATH_SITES.._EVENT[3].site.."/pages/".._EVENT[3].path..".".._EVENT[3].ext,"r")
					local _c = _f.readAll()
					_f.close()
					rednet.send(_EVENT[2],_c)
				else
					rednet.send(_EVENT[2],"SHARK_FAIL")
				end
			else
				rednet.send(_EVENT[2],"SHARK_FAIL")
			end
		end
	else
		return false
	end
end

-- Parse and execute an SLL (Shark Language Line)
-- Arguments: SLL (String)
-- Returns: SUCCESS (Boolean), ERROR (String)
-- Called by: exe_SLS
function exe_SLL(_SLL)
	if COMMANDS[LOCALS["COMMAND"]] then
		if COMMANDS[LOCALS["COMMAND"]].CON_FUNCTION then
			LOCALS["COMMAND_LAST"] = LOCALS["COMMAND"]
		end
	end
	local n_ARG_START = 0
	local n_ARG_END = 0
	local t_ARGS = {}
	if _SLL:sub(1,1) == "<" then
		if _SLL:find(">") == nil then
			return false,"No ending '>' tag"
		end
		if _SLL:sub(2,2) == "/" then
			LOCALS["COMMAND"] = _SLL:sub(3,_SLL:find(">")-1)
			if COMMANDS[LOCALS["COMMAND"]] then
				LOCALS["COMMAND_LAST"] = nil
				return COMMANDS[LOCALS["COMMAND"]].INV_FUNCTION()
			else
				return false,"'"..LOCALS["COMMAND"].."' command doesn't exist"
			end
		else
			n_ARG_START = _SLL:find("%[")
			if n_ARG_START then
				n_ARG_END = _SLL:find("%]")
				if n_ARG_END then
					local _ARGS = _SLL:match("%[(.-)%]")
					for _ARG in _ARGS:gmatch("[^,]+") do
						t_ARGS[#t_ARGS + 1] = _ARG:gsub("'\"", "")
					end
					LOCALS["COMMAND"] = _SLL:sub(2,n_ARG_START-1)
				else
					return false,"No ending ']' for arguments"
				end
			else
				LOCALS["COMMAND"] = _SLL:sub(2,_SLL:find(">")-1)
			end
			if COMMANDS[LOCALS["COMMAND"]] then
				return COMMANDS[LOCALS["COMMAND"]].FUNCTION(t_ARGS)
			else
				return false,"'"..LOCALS["COMMAND"].."' command doesn't exist"
			end
		end
	else
		if not LOCALS["COMMAND_LAST"] then
			return false,"Invalid line format"
		else
			return COMMANDS[LOCALS["COMMAND_LAST"]].CON_FUNCTION(_SLL)
		end
	end
end

-- Parse and execute an SLS (Shark Language Sheet)
-- Arguments: SLS (String)
-- Returns: Errors (Table)
-- Called by: exe_SHARKLE
function exe_SLS(_SLS)
	local t_ERRORS = {}
	local n_LINE = 1
	term.redirect(tm_PAGE)
	for _SLL in _SLS:gmatch("([^\n]*)\n?") do
		local _STATUS,_ERROR = exe_SLL(_SLL:match("^%s*(.-)%s*$"))
		if not _STATUS then
			t_ERRORS[n_LINE] = {
				ERROR = _ERROR,
				LINE = n_LINE
			}
		end
		n_LINE = n_LINE + 1
	end
	term.redirect(tm_SHARK)
	return t_ERRORS
end

-- Parse a Sharkle
-- Arguments: SHARKLE (String)
-- Returns: ID, SITE, EXTENSION, PATH
-- Called by: exe_SHARKLE
function prs_SHARKLE(_SHARKLE)
	local n_ID_START, n_ID_END = _SHARKLE:find("://",1)
	local s_ID = _SHARKLE:sub(1,n_ID_START-1)
	local n_SITE_END = _SHARKLE:find("/",n_ID_END+1)
	local s_SITE = ""
	if not n_SITE_END then
		n_SITE_END = #_SHARKLE
		s_SITE = _SHARKLE:sub(n_ID_END+1,n_SITE_END)
	else
		s_SITE = _SHARKLE:sub(n_ID_END+1,n_SITE_END-1)
	end
	local s_PATH = ""
	local s_EXT = ""
	if #_SHARKLE == n_SITE_END then
		s_PATH = "index"
		s_EXT = "sls"
	else
		s_PATH = _SHARKLE:sub(n_SITE_END+1)
		local n_EXT_START = _SHARKLE:find("%.",n_SITE_END+1)
		if not n_EXT_START then
			s_EXT = "sls"
		else
			s_EXT = _SHARKLE:sub(n_EXT_START+1)
		end
	end
	return s_ID,s_SITE,s_EXT,s_PATH
end

-- Execute a Sharkle
-- Arguments: SHARKLE (String)
-- Returns: Nil
-- Called by: f_CHANGE_SHARKLE
function exe_SHARKLE(_SHARKLE)
	f_DRAW_SHARKLE()
	FIELDS = {}
	local n_ERROR_CODE = 0
	local _ID,_SITE,_EXT,_PATH = prs_SHARKLE(_SHARKLE)
	local b_ME,n_ID = f_RESOLVE_NAME(_ID)
	if not b_ME then
		local t = {
			prot = "SHARK",
			site = _SITE,
			path = _PATH,
			ext = _EXT
		}
		rednet.send(n_ID,t)
		local b_WAIT = true
		local b_FOUND = false
		while b_WAIT do
			local _EVENT = { os.pullEvent() }
			if _EVENT[1] == "rednet_message" then
				if _EVENT[2] == n_ID then
					if _EVENT[3] == "SHARK_FAIL" then
						n_ERROR_CODE = 3
						b_WAIT = false
					else
						LOCALS["ERRORS"] = exe_SLS(_EVENT[3])
						for k,v in pairs(LOCALS["ERRORS"]) do
							f_LOG("PAGE_ERROR",v.ERROR,v.LINE)
						end
						b_FOUND = true
						b_WAIT = false
					end
				end
			else
				f_HANDLE_EVENT(_EVENT)
			end
		end
	else
		if _SITE == "corrupt" then
			term.redirect(tm_PAGE)
			term.setTextColor(COLOURS["PAGE"].error)
			term.setBackgroundColor(COLOURS["PAGE"].bg)
			term.clear()
			term.setCursorPos(2,2)
			print("Uh Oh!")
			term.setCursorPos(2,4)
			term.setTextColor(COLOURS["PAGE"].fg)
			term.setBackgroundColor(COLOURS["PAGE"].bg)
			print("Shark appears to be corrupt!")
			term.setCursorPos(2,5)
			print("Please re-install Shark using the installer!")
			term.setTextColor(COLOURS["PAGE"].fg2)
			term.setCursorPos(2,9)
			print("If the problem persists, contact Dave-ee.")
			term.redirect(tm_SHARK)
		elseif fs.exists(SHARK_PATH.._SITE) and CHECKSUMS[_SITE] then
			term.redirect(tm_PAGE)
			local _f = fs.open(SHARK_PATH.._SITE,"r")
			local _c = _f.readAll()
			local _SUM = MD5.sumhexa(_c)
			if _SUM == CHECKSUMS[_SITE] then
				local _func = load(_c)
				if _SITE == "about" then
					_func(LOCALS,COLOURS,SHARK_VERSION)
				elseif _SITE == "errors" then
					local n_ERRORS = 0
					for k,v in pairs(LOCALS["ERRORS"]) do
						n_ERRORS = n_ERRORS + 1
					end
					_func(LOCALS,COLOURS,n_ERRORS)
				else
					_func(LOCALS,COLOURS)
				end
			else
				n_ERROR_CODE = 10
			end
			_f.close()
			term.redirect(tm_SHARK)
		elseif fs.exists(SHARK_PATH_SITES.._SITE) and fs.isDir(SHARK_PATH_SITES.._SITE) then
			_FILEPATH = SHARK_PATH_SITES.._SITE.."/pages/".._PATH..".".._EXT
			if fs.exists(_FILEPATH) then
				local _f = fs.open(_FILEPATH,"r")
				local _c = _f.readAll()
				_f.close()
				LOCALS["ERRORS"] = exe_SLS(_c)
				for k,v in pairs(LOCALS["ERRORS"]) do
					f_LOG("PAGE_ERROR",v.ERROR,v.LINE)
				end
			else
				n_ERROR_CODE = 2
			end
		else
			n_ERROR_CODE = 1
		end
	end
	if n_ERROR_CODE == 1 or n_ERROR_CODE == 2 or n_ERROR_CODE == 3 or n_ERROR_CODE == 6 then
		return f_CHANGE_SHARKLE(LOCALS["SHARKLE_NOTFOUND"])
	elseif n_ERROR_CODE == 10 then
		return f_CHANGE_SHARKLE(LOCALS["SHARKLE_CORRUPT"])
	end
end

rednet.open("top")

f_DRAW_UI()
f_CHANGE_SHARKLE(SHARKLE)
while SHARK_RUNNING do
	local _EVENT = { os.pullEvent() }
	f_HANDLE_EVENT(_EVENT)
end
term.redirect(tm_DEFAULT)
term.setTextColor(colors.cyan)
term.setBackgroundColor(colors.black)
term.clear()
term.setCursorPos(1,1)
print("Shark has shutdown.")