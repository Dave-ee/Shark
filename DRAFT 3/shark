--[[

	Shark
	Draft 3
	
	PLAN:
		- UI
			- Sharkle bar
			- Menu (History, Settings, About, Exit)
		- Language
			- Shark Language Sheet (.sls)
		- Local Storage
			- Shark Pages
				- Home
				- History
				- Settings
				- About
				- Error Codes (Not Found, Timeout etc.)
			- DNS
				- Local redirecting and resolving
			- History
				- History of your visits
			- Sites (hosting)
				- Host a site
			- Certificates
				- Allows you to access certain private sites
		- Error Codes
			- 1: Domain not found
			- 2: Page not found
			- 3: Host didn't respond (doesn't exist or Shark not running)
			- 4: Host requires certificate from client
			- 5: Host denied certificate from client
			- 6: DNS couldn't resolve hostname
--]]

local SHARKLE = "local://test/"

local SHARK_PATH = "/sharkfs/"
local SHARK_PATH_SITES = SHARK_PATH.."sites/"
local SHARK_PATH_HISTORY = SHARK_PATH.."history"
local SHARK_PATH_SETTINGS = SHARK_PATH.."settings"
local SHARK_PATH_CERTS = SHARK_PATH.."certs"
local SHARK_PATH_DNS = SHARK_PATH.."dns"
local SHARK_PATH_LOG = SHARK_PATH.."log"

local t_W,t_H = term.getSize()

local tm_DEFAULT = term.current()
local tm_SHARK = window.create(tm_DEFAULT,1,1,t_W,3,true)
local tm_PAGE = window.create(tm_DEFAULT,1,4,t_W,t_H-3,true)

local COLOURS = {
	["BAR"] = {
		bg = colors.cyan,
		fg = colors.gray
	},
	["SHARKLE"] = {
		bg = colors.lightGray,
		fg = colors.white,
		clear = colors.red,
		enter = colors.lime
	}
}

local GLOBALS = {
	["color"] = {
		STACK_TC = {term.getTextColor()},
		STACK_BC = {term.getBackgroundColor()}
	},
	["cursor"] = {
		STACK_X = {term.getCursorPos()},
		STACK_Y = {select(2,term.getCursorPos())}
	},
	["print"] = {
		SWITCH = false,
		X = 0,
		Y = 0
	},
	["write"] = {
		SWITCH = false,
		X = 0,
		Y = 0
	},
	["button"] = {
		SWITCH = false,
		OLD_X = 0,
		OLD_Y = 0,
		X = 0,
		Y = 0,
		W = 0,
		H = 0,
		LINK = "",
		COUNT = 1
	}
}

local FIELDS = {}

local COMMANDS = {
	["print"] = {
		FUNCTION = function(t)
			GLOBALS["print"].SWITCH = true
			local _X,_Y = 0, 0
			if #t > 0 then
				_X,_Y = unpack(t)
				term.setCursorPos(tonumber(_X),tonumber(_Y))
			else
				_X,_Y = term.getCursorPos()
			end
			GLOBALS["print"].X,GLOBALS["print"].Y = term.getCursorPos()
			return true
		end,
		CON_FUNCTION = function(s)
			local _X,_Y = term.getCursorPos()
			term.setCursorPos(GLOBALS["print"].X,_Y)
			print(s)
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["print"].SWITCH = false
			GLOBALS["print"].X = 0
			GLOBALS["print"].Y = 0
			return true
		end
	},
	["write"] = {
		FUNCTION = function(t)
			local _X,_Y = 0, 0
			if #t > 0 then
				_X,_Y = unpack(t)
				term.setCursorPos(tonumber(_X),tonumber(_Y))
			else
				_X,_Y = term.getCursorPos()
			end
			GLOBALS["write"].X,GLOBALS["write"].Y = term.getCursorPos()
			return true
		end,
		CON_FUNCTION = function(s)
			write(s)
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["write"].SWITCH = false
			GLOBALS["write"].X = 0
			GLOBALS["write"].Y = 0
			return true
		end
	},
	["button"] = {
		FUNCTION = function(t)
			GLOBALS["button"].SWITCH = true
			local _X,_Y,_W,_H,_LINK = unpack(t)
			GLOBALS["button"].X = tonumber(_X)
			GLOBALS["button"].Y = tonumber(_Y)
			if tonumber(_W) then
				GLOBALS["button"].W = tonumber(_W)
				GLOBALS["button"].H = tonumber(_H)
				GLOBALS["button"].LINK = _LINK
				paintutils.drawFilledBox(GLOBALS["button"].X,GLOBALS["button"].Y,GLOBALS["button"].X+GLOBALS["button"].W-1,GLOBALS["button"].Y+GLOBALS["button"].H-1,term.getBackgroundColor())
			else
				GLOBALS["button"].W = 0
				GLOBALS["button"].H = 0
				GLOBALS["button"].LINK = _W
			end
			GLOBALS["button"].OLD_X,GLOBALS["button"].OLD_Y = term.getCursorPos()
			return true
		end,
		CON_FUNCTION = function(s)
			local _X,_Y = GLOBALS["button"].X,GLOBALS["button"].Y
			if GLOBALS["button"].W == 0 then
				GLOBALS["button"].W = #s+2
				local _W = GLOBALS["button"].W
				term.setCursorPos(_X,_Y)
				print(string.rep(" ",_W))
				term.setCursorPos(_X,_Y+1)
				print(" "..s.." ")
				term.setCursorPos(_X,_Y+2)
				print(string.rep(" ",_W))
			else
				term.setCursorPos(_X+1,_Y+GLOBALS["button"].COUNT)
				print(s)
				GLOBALS["button"].COUNT = GLOBALS["button"].COUNT + 1
			end
			return true
		end,
		INV_FUNCTION = function()
			local _T = {
				X = GLOBALS["button"].X,
				Y = GLOBALS["button"].Y,
				XE = GLOBALS["button"].X + GLOBALS["button"].W - 1,
				YE = GLOBALS["button"].Y + GLOBALS["button"].H - 1,
				FUNCTION = function() 
					SHARKLE = GLOBALS["button"].LINK 
				end
			}
			table.insert(FIELDS,_T)
			GLOBALS["button"].SWITCH = false
			GLOBALS["button"].OLD_X = 0
			GLOBALS["button"].OLD_Y = 0
			GLOBALS["button"].X = 0
			GLOBALS["button"].Y = 0
			GLOBALS["button"].W = 0
			GLOBALS["button"].H = 0
			GLOBALS["button"].LINK = ""
			GLOBALS["button"].COUNT = 1
			return true
		end
	},
	["color"] = {
		FUNCTION = function(t)
			if #t > 1 then
				GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC + 1] = colors[t[1]]
				GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC + 1] = colors[t[2]]
				term.setTextColor(colors[t[1]])
				term.setBackgroundColor(colors[t[2]])
			else
				GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC + 1] = colors[t[1]]
				GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC + 1] = term.getBackgroundColor()
				term.setTextColor(colors[t[1]])
			end
			return true
		end,
		INV_FUNCTION = function()
			if #GLOBALS["color"].STACK_TC > 1 then
				GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC] = nil
				GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC] = nil
				term.setTextColor(GLOBALS["color"].STACK_TC[#GLOBALS["color"].STACK_TC])
				term.setBackgroundColor(GLOBALS["color"].STACK_BC[#GLOBALS["color"].STACK_BC])
			end
			return true
		end
	},
	["cursor"] = {
		FUNCTION = function(t)
			local _X,_Y = unpack(t)
			GLOBALS["cursor"].STACK_X[#GLOBALS["cursor"].STACK_X + 1] = tonumber(_X)
			GLOBALS["cursor"].STACK_Y[#GLOBALS["cursor"].STACK_Y + 1] = tonumber(_Y)
			term.setCursorPos(tonumber(_X),tonumber(_Y))
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["cursor"].STACK_X[#GLOBALS["cursor"].STACK_X] = nil
			GLOBALS["cursor"].STACK_Y[#GLOBALS["cursor"].STACK_Y] = nil
			term.setCursorPos(GLOBALS["cursor"].STACK_X[#GLOBALS["cursor"].STACK_X],GLOBALS["cursor"].STACK_Y[#GLOBALS["cursor"].STACK_Y])
			return true
		end
	}
}

local LOCALS = {
	["COMMAND"] = nil,
	["COMMAND_LAST"] = nil,
	["ERRORS"] = nil,
	["SHARKLE_LAST"] = nil
}

-- Log error to file
-- Arguments: TYPE (String), ERROR (String), LINE (Number)
-- Called by: f_ERROR
local function f_LOG(_T,_S,_L)
	local s_TIME = textutils.formatTime(os.time(),true)
	if _T == "ERROR" then
		local _f = fs.open(SHARK_PATH_LOG,"a")
		_f.writeLine("--- START ERROR ---")
		_f.writeLine("Time: "..s_TIME)
		_f.writeLine("Sharkle: "..SHARKLE)
		if _L then
			_f.writeLine("Line: ".._L)
		end
		_f.writeLine("Error: ".._S)
		_f.writeLine("--- END ERROR ---")
		_f.close()
	elseif _T == "PAGE_ERROR" then
		local _f = fs.open(SHARK_PATH_LOG,"a")
		_f.writeLine("["..LOCALS["SHARKLE_LAST"].."]:".._L..": ".._S)
		_f.close()
	elseif _T == "HISTORY" then
		local _f = fs.open(SHARK_PATH_HISTORY,"a")
		_f.writeLine("["..s_TIME.."] "..SHARKLE)
		_f.close()
	elseif _T == "SLL" then
		local _f = fs.open(SHARK_PATH_LOG,"a")
		_f.writeLine("[SLL LOG] ".._S)
		_f.close()
	end
end

-- Error out
-- Arguments: ERROR (String), LINE (Number)
local function f_ERROR(_S)
	term.setCursorPos(1,1)
	term.setBackgroundColor(colors.black)
	term.clear()
	term.setTextColor(colors.red)
	f_LOG("ERROR",_S)
	printError("ERROR:")
	printError(_S)
	printError("More details in "..SHARK_PATH_LOG..".")
	error("",0)
end

-- Resolve name
-- Returns Self (True/False), ID (Computer ID)
-- called by: exe_SHARKLE
local function f_RESOLVE_NAME(_NAME)
	local b_SELF = false
	if not tonumber(_NAME) then
		if _NAME == "local" or _NAME == "localhost" then
			_SELF = true
			_ID = os.getComputerID()
		else
			local _f = fs.open(SHARK_PATH_DNS,"r")
			local t_DNS = textutils.unseralize(_f.readAll())
			if t_DNS[_NAME] then
				_ID = t_DNS[_NAME]
				if _ID == os.getComputerID() then
					_SELF = true
				end
			else
				_ID = false
			end
		end
	else
		if tonumber(_NAME) == os.getComputerID() then
			_SELF = true
		end
	end
	return _SELF,_ID
end


-- Draw Shark's Sharkle
local function f_DRAW_SHARKLE()
	local _tm = term.current()
	term.redirect(tm_SHARK)
	term.setTextColor(COLOURS["SHARKLE"].fg)
	term.setBackgroundColor(COLOURS["SHARKLE"].bg)
	term.setCursorPos(2,2)
	print(string.rep(" ",t_W-8))
	term.setCursorPos(2,2)
	if #SHARKLE > (t_W-6) then
		print(SHARKLE:sub(1,t_W-5).."..")
	else
		print(SHARKLE)
	end
	term.redirect(_tm)
end

-- Draw Shark's UI (doesn't include page)
local function f_DRAW_SHARK()
	term.redirect(tm_SHARK)
	term.setTextColor(COLOURS["BAR"].fg)
	term.setBackgroundColor(COLOURS["BAR"].bg)
	term.setCursorPos(1,1)
	term.clearLine()
	term.setCursorPos(1,2)
	term.clearLine()
	term.setCursorPos(1,3)
	term.clearLine()
	term.setCursorPos(2,2)
	term.setTextColor(COLOURS["SHARKLE"].fg)
	term.setBackgroundColor(COLOURS["SHARKLE"].bg)
	write(string.rep(" ",t_W-6))
	term.setTextColor(COLOURS["SHARKLE"].clear)
	write(string.char(215))
	term.setTextColor(COLOURS["SHARKLE"].enter)
	write(string.char(16))
	term.setCursorPos(t_W-1,2)
	term.setTextColor(COLOURS["SHARKLE"].fg)
	term.setBackgroundColor(COLOURS["BAR"].bg)
	print(string.char(166))
	f_DRAW_SHARKLE()
	term.redirect(tm_PAGE)
end

-- Handle an event for Shark or page
local function f_HANDLE_EVENT(_EVENT)
	local _EVENT = unpack(_EVENT)
	if _EVENT[1] == "mouse_click" then
		
	elseif _EVENT[1] == "key" then
		
	elseif _EVENT[1] == "char" then
		
	else
		return false
	end
end

-- Change SHARKLE
local function f_CHANGE_SHARKLE(s)
	LOCALS["SHARKLE_LAST"] = SHARKLE
	SHARKLE = s
	f_LOG("HISTORY",SHARKLE)
	return exe_SHARKLE(SHARKLE)
end

-- Parse and execute an SLL (Shark Language Line)
-- Returns: SUCCESS (Boolean), ERROR (String)
-- Called by: exe_SLS
function exe_SLL(_SLL)
	if COMMANDS[LOCALS["COMMAND"]] then
		if COMMANDS[LOCALS["COMMAND"]].CON_FUNCTION then
			LOCALS["COMMAND_LAST"] = LOCALS["COMMAND"]
		end
	end
	local n_ARG_START = 0
	local n_ARG_END = 0
	local t_ARGS = {}
	if _SLL:sub(1,1) == "<" then
		if _SLL:find(">") == nil then
			return false,"No ending '>' tag"
		end
		if _SLL:sub(2,2) == "/" then
			LOCALS["COMMAND"] = _SLL:sub(3,_SLL:find(">")-1)
			if COMMANDS[LOCALS["COMMAND"]] then
				LOCALS["COMMAND_LAST"] = nil
				return COMMANDS[LOCALS["COMMAND"]].INV_FUNCTION()
			else
				return false,"'"..LOCALS["COMMAND"].."' command doesn't exist"
			end
		else
			n_ARG_START = _SLL:find("%[")
			if n_ARG_START then
				n_ARG_END = _SLL:find("%]")
				if n_ARG_END then
					local _ARGS = _SLL:match("%[(.-)%]")
					for _ARG in _ARGS:gmatch("[^,]+") do
						t_ARGS[#t_ARGS + 1] = _ARG:gsub("'\"", "")
					end
					LOCALS["COMMAND"] = _SLL:sub(2,n_ARG_START-1)
				else
					return false,"No ending ']' for arguments"
				end
			else
				LOCALS["COMMAND"] = _SLL:sub(2,_SLL:find(">")-1)
			end
			if COMMANDS[LOCALS["COMMAND"]] then
				return COMMANDS[LOCALS["COMMAND"]].FUNCTION(t_ARGS)
			else
				return false,"'"..LOCALS["COMMAND"].."' command doesn't exist"
			end
		end
	else
		if not LOCALS["COMMAND_LAST"] then
			return false,"Invalid line format"
		else
			return COMMANDS[LOCALS["COMMAND_LAST"]].CON_FUNCTION(_SLL)
		end
	end
end

-- Parse and execute an SLS (Shark Language Sheet)
-- Returns: Errors (Table)
-- Called by: exe_SHARKLE
function exe_SLS(_SLS)
	local t_ERRORS = {}
	local n_LINE = 1
	for _SLL in _SLS:gmatch("([^\n]*)\n?") do
		local _STATUS,_ERROR = exe_SLL(_SLL:match("^%s*(.-)%s*$"))
		if not _STATUS then
			t_ERRORS[n_LINE] = {
				ERROR = _ERROR,
				LINE = n_LINE
			}
		end
		n_LINE = n_LINE + 1
	end
	return t_ERRORS
end

-- Parse a SHARKLE
-- Returns: ID, DOMAIN, EXTENSION, PATH
-- Called by: exe_SHARKLE
function prs_SHARKLE(_SHARKLE)
	local n_ID_START, n_ID_END = _SHARKLE:find("://",1)
	local s_ID = _SHARKLE:sub(1,n_ID_START-1)
	local n_DOMAIN_END = _SHARKLE:find("/",n_ID_END+1)
	local s_DOMAIN = ""
	if not n_DOMAIN_END then
		n_DOMAIN_END = #_SHARKLE
		s_DOMAIN = _SHARKLE:sub(n_ID_END+1,n_DOMAIN_END)
	else
		s_DOMAIN = _SHARKLE:sub(n_ID_END+1,n_DOMAIN_END-1)
	end
	local s_PATH = ""
	local s_EXT = ""
	if #_SHARKLE == n_DOMAIN_END then
		s_PATH = "index"
		s_EXT = "sls"
	else
		s_PATH = _SHARKLE:sub(n_DOMAIN_END+1)
		local n_EXT_START = _SHARKLE:find("%.",n_DOMAIN_END+1)
		if not n_EXT_START then
			s_EXT = "sls"
		else
			s_EXT = _SHARKLE:sub(n_EXT_START+1)
		end
	end
	return s_ID,s_DOMAIN,s_EXT,s_PATH
end

-- Execute a SHARKLE
function exe_SHARKLE(_SHARKLE)
	f_DRAW_SHARKLE()
	FIELDS = {}
	local n_ERROR_CODE = nil
	local _ID,_DOMAIN,_EXT,_PATH = prs_SHARKLE(_SHARKLE)
	local b_ME,n_ID = f_RESOLVE_NAME(_ID)
	if not b_ME and not n_ID then
		n_ERROR_CODE = 6
	end
	if b_ME then
		if _DOMAIN == "errors" then
			local n_ERRORS = 0
			for k,v in pairs(LOCALS["ERRORS"]) do
				n_ERRORS = n_ERRORS + 1
			end
			if n_ERRORS > 0 then
				for k,v in pairs(LOCALS["ERRORS"]) do
					f_LOG("PAGE_ERROR",v.ERROR,v.LINE)
				end
				term.redirect(tm_PAGE)
				term.setTextColor(colors.red)
				term.setBackgroundColor(colors.black)
				term.clear()
				term.setCursorPos(2,2)
				print("Uh Oh! There were some errors!")
				term.setTextColor(colors.white)
				term.setCursorPos(2,4)
				print("Information:")
				term.setTextColor(colors.gray)
				term.setCursorPos(2,5)
				print("Sharkle: "..LOCALS["SHARKLE_LAST"])
				term.setCursorPos(2,6)
				write("Errors: "..n_ERRORS)
				term.setTextColor(colors.white)
				term.setCursorPos(2,8)
				print("Errors have been logged.")
				term.setCursorPos(2,9)
				print("Please contact the Administrator of the site!")
				term.redirect(tm_SHARK)
			else
				term.redirect(tm_PAGE)
				term.setTextColor(colors.white)
				term.setBackgroundColor(colors.black)
				term.clear()
				term.setCursorPos(2,2)
				print("All's well!")
				term.setTextColor(colors.gray)
				term.setCursorPos(2,4)
				print("There were no errors found on:")
				term.setCursorPos(2,5)
				print(LOCALS["SHARKLE_LAST"])
				term.redirect(tm_SHARK)
			end
		else
			if fs.exists(SHARK_PATH_SITES.._DOMAIN) and fs.isDir(SHARK_PATH_SITES.._DOMAIN) then
				_FILEPATH = SHARK_PATH_SITES.._DOMAIN.."/pages/".._PATH..".".._EXT
				if fs.exists(_FILEPATH) then
					local _f = fs.open(_FILEPATH,"r")
					local _c = _f.readAll()
					_f.close()
					LOCALS["ERRORS"] = exe_SLS(_c)
				else
					n_ERROR_CODE = 2
				end
			else
				n_ERROR_CODE = 1
			end
		end
	end
	if n_ERROR_CODE then
		if nError_CODE == 1 or nError_CODE == 2 or nError_CODE == 3 or nError_CODE == 6 then
			return f_CHANGE_SHARKLE("local://not-found")
		elseif n_ERROR_CODE == 7 then
			return f_CHANGE_SHARKLE("local://errors")
		end
	end
end

f_DRAW_SHARK()
f_CHANGE_SHARKLE(SHARKLE)
sleep(3)
f_CHANGE_SHARKLE("local://errors")
term.redirect(tm_DEFAULT)
