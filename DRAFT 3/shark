--[[

	Shark
	Draft 3
	
	PLAN:
		- UI
			- Sharkle bar
			- Menu (History, Settings, About, Exit)
		- Language
			- Shark Language Sheet (.sls)
		- Local Storage
			- Shark Pages
				- Home
				- History
				- Settings
				- About
				- Error Codes (Not Found, Timeout etc.)
			- DNS
				- Local redirecting and resolving
			- History
				- History of your visits
			- Sites (hosting)
				- Host a site
			- Certificates
				- Allows you to access certain private sites
		- Error Codes
			- 1: Domain not found
			- 2: Page not found
			- 3: Host didn't respond (doesn't exist or Shark not running)
			- 4: Host requires certificate
			- 5: Host denied certificate
			- 6: DNS couldn't resolve hostname
			- 7: Errors on requested SLS
--]]

local SHARKLE = "local://test/"

local SHARK_PATH = "/sharkfs/"
local SHARK_PATH_SITES = SHARK_PATH.."sites/"
local SHARK_PATH_HISTORY = SHARK_PATH.."history"
local SHARK_PATH_SETTINGS = SHARK_PATH.."settings"
local SHARK_PATH_CERTS = SHARK_PATH.."certs"
local SHARK_PATH_DNS = SHARK_PATH.."dns"
local SHARK_PATH_LOG = SHARK_PATH.."log"

local GLOBALS = {
	["color"] = {
		SWITCH = false,
		COUNT = 0,
		STORE_TC = {},
		STORE_BC = {}
	},
	["cursor"] = {
		SWITCH = false,
		COUNT = 0,
		STORE = {}
	},
	["print"] = {
		SWITCH = false,
		X = 0,
		Y = 0
	},
	["write"] = {
		SWITCH = false,
		X = 0,
		Y = 0
	},
	["button"] = {
		SWITCH = false,
		OLD_X = 0,
		OLD_Y = 0,
		X = 0,
		Y = 0,
		W = 0,
		H = 0,
		LINK = "",
		COUNT = 1
	}
}

local FIELDS = {}

local COMMANDS = {
	["color"] = {
		FUNCTION = function(t)
			GLOBALS["color"].SWITCH = true
			GLOBALS["color"].COUNT = GLOBALS["color"].COUNT + 1
			GLOBALS["color"].STORE_TC[GLOBALS["color"].COUNT] = term.getTextColor()
			GLOBALS["color"].STORE_BC[GLOBALS["color"].COUNT] = term.getBackgroundColor()
			if #t > 1 then
				term.setTextColor(colors[t[1]])
				term.setBackgroundColor(colors[t[2]])
			else
				term.setTextColor(colors[t[1]])
			end
		end,
		CON_FUNCTION = function()
			return nil
		end,
		INV_FUNCTION = function()
			GLOBALS["color"].SWITCH = false
			GLOBALS["color"].COUNT = GLOBALS["color"].COUNT - 1 
			term.setTextColor(GLOBALS["color"].STORE_TC[GLOBALS["color"].COUNT])
			term.setBackgroundColor(GLOBALS["color"].STORE_BC[GLOBALS["color"].COUNT])
		end
	},
	["cursor"] = {
		FUNCTION = function(t)
			GLOBALS["cursor"].SWITCH = true
			local _X,_Y = unpack(t)
			GLOBALS["cursor"].COUNT = GLOBALS["cursor"] + 1
			GLOBALS["cursor"].STORE[GLOBALS["cursor"].COUNT] = {term.getCursorPos()}
			term.setCursorPos(tonumber(_X),tonumber(_Y))
		end,
		CON_FUNCTION = function()
			return nil
		end,
		INV_FUNCTION = function()
			GLOBALS["color"].SWITCH = false
			GLOBALS["cursor"].COUNT = GLOBALS["cursor"].COUNT - 1
			term.setCursorPos(unpack(GLOBALS["cursor"].STORE))
		end
	},
	["print"] = {
		FUNCTION = function(t)
			GLOBALS["print"].SWITCH = true
			local _X,_Y = unpack(t)
			term.setCursorPos(tonumber(_X),tonumber(_Y))
			GLOBALS["print"].X,GLOBALS["print"].Y = term.getCursorPos()
		end,
		CON_FUNCTION = function(s)
			local _X,_Y = term.getCursorPos()
			term.setCursorPos(GLOBALS["print"].X,_Y)
			print(s)
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["print"].SWITCH = false
			GLOBALS["print"].X = 0
			GLOBALS["print"].Y = 0
		end
	},
	["write"] = {
		FUNCTION = function(t)
			GLOBALS["write"].SWITCH = true
			local _X,_Y = unpack(t)
			term.setCursorPos(tonumber(_X),tonumber(_Y))
			GLOBALS["write"].X,GLOBALS["write"].Y = term.getCursorPos()
		end,
		CON_FUNCTION = function(s)
			write(s)
			return true
		end,
		INV_FUNCTION = function()
			GLOBALS["write"].SWITCH = false
			GLOBALS["write"].X = 0
			GLOBALS["write"].Y = 0
		end
	},
	["button"] = {
		FUNCTION = function(t)
			GLOBALS["button"].SWITCH = true
			local _X,_Y,_W,_H,_LINK = unpack(t)
			GLOBALS["button"].X = tonumber(_X)
			GLOBALS["button"].Y = tonumber(_Y)
			if tonumber(_W) then
				GLOBALS["button"].W = tonumber(_W)
				GLOBALS["button"].H = tonumber(_H)
				GLOBALS["button"].LINK = _LINK
				paintutils.drawFilledBox(GLOBALS["button"].X,GLOBALS["button"].Y,GLOBALS["button"].X+GLOBALS["button"].W-1,GLOBALS["button"].Y+GLOBALS["button"].H-1,term.getBackgroundColor())
			else
				GLOBALS["button"].W = 0
				GLOBALS["button"].H = 0
				GLOBALS["button"].LINK = _W
			end
			GLOBALS["button"].OLD_X,GLOBALS["button"].OLD_Y = term.getCursorPos()
		end,
		CON_FUNCTION = function(s)
			local _X,_Y = GLOBALS["button"].X,GLOBALS["button"].Y
			if GLOBALS["button"].W == 0 then
				GLOBALS["button"].W = #s+2
				local _W = GLOBALS["button"].W
				term.setCursorPos(_X,_Y)
				print(string.rep(" ",_W))
				term.setCursorPos(_X,_Y+1)
				print(" "..s.." ")
				term.setCursorPos(_X,_Y+2)
				print(string.rep(" ",_W))
			else
				term.setCursorPos(_X+1,_Y+GLOBALS["button"].COUNT)
				print(s)
				GLOBALS["button"].COUNT = GLOBALS["button"].COUNT + 1
			end
		end,
		INV_FUNCTION = function()
			table.insert(FIELDS,GLOBALS["button"])
			GLOBALS["button"].SWITCH = false
			GLOBALS["button"].OLD_X = 0
			GLOBALS["button"].OLD_Y = 0
			GLOBALS["button"].X = 0
			GLOBALS["button"].Y = 0
			GLOBALS["button"].W = 0
			GLOBALS["button"].H = 0
			GLOBALS["button"].LINK = ""
			GLOBALS["button"].COUNT = 1
		end
	}
}

local LOCALS = {
	["COMMAND"] = nil,
	["ERRORS"] = nil,
	["SHARKLE_LAST"] = nil,
}

-- Log error to file
-- Arguments: TYPE (String), ERROR (String), LINE (Number)
-- Called by: f_ERROR
local function f_LOG(_T,_S,_L)
	local s_TIME = textutils.formatTime(os.time(),true)
	local _f = fs.open(SHARK_PATH_LOG,"a")
	if _T == "ERROR" then
		_f.writeLine("--- START ERROR ---")
		_f.writeLine("Time: "..s_TIME)
		_f.writeLine("Sharkle: "..SHARKLE)
		if _L then
			_f.writeLine("Line: ".._L)
		end
		_f.writeLine("Error: ".._S)
		_f.writeLine("--- END ERROR ---")
	elseif _T == "HISTORY" then
		_f.writeLine("'"..SHARKLE.."' accessed at "..s_TIME)
	end
	_f.close()
end

-- Error out
-- Arguments: ERROR (String), LINE (Number)
local function f_ERROR(_S,_L)
	term.setCursorPos(1,1)
	term.setBackgroundColor(colors.black)
	term.clear()
	term.setTextColor(colors.red)
	if _L then
		f_LOG("ERROR",_S,_L)
		printError("ERROR ON LINE ".._L..":")
		printError(_S)
		printError("More details in "..SHARK_PATH_LOG..".")
		error("",0)
	else
		f_LOG("ERROR",_S)
		printError("ERROR:")
		printError(_S)
		printError("More details in "..SHARK_PATH_LOG..".")
		error("",0)
	end
end

-- Resolve name
-- Returns Self (True/False), ID (Computer ID)
-- called by: exe_SHARKLE
local function f_RESOLVE_NAME(_NAME)
	local b_SELF = false
	if not tonumber(_NAME) then
		if _NAME == "local" or _NAME == "localhost" then
			_SELF = true
			_ID = os.getComputerID()
		else
			local _f = fs.open(SHARK_PATH_DNS,"r")
			local t_DNS = textutils.unseralize(_f.readAll())
			if t_DNS[_NAME] then
				_ID = t_DNS[_NAME]
				if _ID == os.getComputerID() then
					_SELF = true
				end
			else
				_ID = false
			end
		end
	else
		if tonumber(_NAME) == os.getComputerID() then
			_SELF = true
		end
	end
	return _SELF,_ID
end

-- Parse and execute an SLL (Shark Language Line)
-- Returns: SUCCESS (Boolean), ERROR (String)
-- Called by: exe_SLS
local function exe_SLL(_SLL)
	local s_COMMAND_LAST = nil
	if COMMANDS[LOCALS["COMMAND"]] then
		s_COMMAND_LAST = LOCALS["COMMAND"]
	end
	local n_ARG_START = 0
	local n_ARG_END = 0
	local t_ARGS = {}
	if _SLL:sub(1,1) == "<" then
		if _SLL:find(">") then
			if _SLL:sub(2,2) == "/" then
				LOCALS["COMMAND"] = _SLL:sub(3,_SLL:find(">")-1)
				if COMMANDS[LOCALS["COMMAND"]] then
					COMMANDS[LOCALS["COMMAND"]].INV_FUNCTION()
					return true
				else
					return false,"'"..LOCALS["COMMAND"].."' command doesn't exist"
				end
			else
				n_ARG_START = _SLL:find("%[")
				if n_ARG_START then
					n_ARG_END = _SLL:find("%]")
					if n_ARG_END then
						local _ARGS = _SLL:match("%[(.-)%]")
						for _ARG in _ARGS:gmatch("[^,]+") do
							t_ARGS[#t_ARGS + 1] = _ARG:gsub("'\"", "")
						end
						LOCALS["COMMAND"] = _SLL:sub(2,n_ARG_START-1)
					else
						return false,"No ending ']' for arguments"
					end
				else
					LOCALS["COMMAND"] = _SLL:sub(2,_SLL:find(">")-1)
				end
				if COMMANDS[LOCALS["COMMAND"]] then
					COMMANDS[LOCALS["COMMAND"]].FUNCTION(t_ARGS)
					return true
				else
					return false,"'"..LOCALS["COMMAND"].."' command doesn't exist"
				end
			end
		else
			return false,"No ending '>' tag"
		end
	else
		if not s_COMMAND_LAST then
			return false,"Invalid syntax"
		else
			COMMANDS[s_COMMAND_LAST].CON_FUNCTION(_SLL)
			return true
		end
	end
end

-- Parse and execute an SLS (Shark Language Sheet)
-- Returns: Errors (Table)
-- Called by: exe_SHARKLE
local function exe_SLS(_SLS)
	local t_ERRORS = {}
	local n_LINE = 1
	for _SLL in _SLS:gmatch("([^\n]*)\n?") do
		local _STATUS,_ERROR = exe_SLL(_SLL:match("^%s*(.-)%s*$"))
		if not _STATUS then
			t_ERRORS[n_LINE] = _ERROR
		end
		n_LINE = n_LINE + 1
	end
	return t_ERRORS
end

-- Parse a SHARKLE
-- Returns: ID, DOMAIN, EXTENSION, PATH
-- Called by: exe_SHARKLE
local function prs_SHARKLE(_SHARKLE)
	local n_ID_START, n_ID_END = _SHARKLE:find("://",1)
	local s_ID = _SHARKLE:sub(1,n_ID_START-1)
	local n_DOMAIN_END = _SHARKLE:find("/",n_ID_END+1)
	local s_DOMAIN = ""
	if not n_DOMAIN_END then
		n_DOMAIN_END = #_SHARKLE
		s_DOMAIN = _SHARKLE:sub(n_ID_END+1,n_DOMAIN_END)
	else
		s_DOMAIN = _SHARKLE:sub(n_ID_END+1,n_DOMAIN_END-1)
	end
	local s_PATH = ""
	local s_EXT = ""
	if #_SHARKLE == n_DOMAIN_END then
		s_PATH = "index"
		s_EXT = "sls"
	else
		s_PATH = _SHARKLE:sub(n_DOMAIN_END+1)
		local n_EXT_START = _SHARKLE:find("%.",n_DOMAIN_END+1)
		if not n_EXT_START then
			s_EXT = "sls"
		else
			s_EXT = _SHARKLE:sub(n_EXT_START+1)
		end
	end
	return s_ID,s_DOMAIN,s_EXT,s_PATH
end

-- Execute a SHARKLE
local function exe_SHARKLE(_SHARKLE)
	local n_ERROR_CODE = nil
	local _ID,_DOMAIN,_EXT,_PATH = prs_SHARKLE(_SHARKLE)
	local b_ME,n_ID = f_RESOLVE_NAME(_ID)
	if not b_ME and not n_ID then
		n_ERROR_CODE = 6
	end
	if b_ME then
		-- Check if it's a Shark page
		if _DOMAIN == "errors" then
			if LOCALS["ERRORS"] then
				for k,v in pairs(LOCALS["ERRORS"]) do
					f_LOG("ERROR",v,k)
				end
				--term.redirect(tm_PAGE)
				term.setTextColor(colors.red)
				term.setBackgroundColor(colors.black)
				term.clear()
				term.setCursorPos(2,5)
				print("Uh Oh! There was a problem!")
				term.setTextColor(colors.white)
				term.setCursorPos(2,7)
				print("Information:")
				term.setTextColor(colors.gray)
				term.setCursorPos(2,8)
				print("Sharkle: "..LOCALS["SHARKLE_LAST"])
				term.setCursorPos(2,9)
				print("Errors: "..#LOCALS["ERRORS"])
				term.setTextColor(colors.white)
				term.setCursorPos(2,11)
				print("Errors have been logged.")
				term.setCursorPos(2,12)
				print("Please contact the Administrator of the site!")
				--term.redirect(tm_SHARK)
			else
				--term.redirect(tm_PAGE)
				term.setTextColor(colors.red)
				term.setBackgroundColor(colors.black)
				term.clear()
				term.setCursorPos(2,5)
				print("Uh Oh! There was a problem!")
				--term.redirect(tm_SHARK)
			end
		-- It's not, so let's check if it's a site
		else
			if fs.exists(SHARK_PATH_SITES.._DOMAIN) and fs.isDir(SHARK_PATH_SITES.._DOMAIN) then
				_FILEPATH = SHARK_PATH_SITES.._DOMAIN.."/pages/".._PATH..".".._EXT
				if fs.exists(_FILEPATH) then
					local _f = fs.open(_FILEPATH,"r")
					local _c = _f.readAll()
					_f.close()
					local t_ERRORS = exe_SLS(_c)
					if #t_ERRORS > 0 then
						LOCALS["ERRORS"] = t_ERRORS
						n_ERROR_CODE = 7
					end
				else
					n_ERROR_CODE = 2
				end
			else
				n_ERROR_CODE = 1
			end
		end
	end
	LOCALS["SHARKLE_LAST"] = SHARKLE
	if n_ERROR_CODE then
		if nError_CODE == 1 or nError_CODE == 2 or nError_CODE == 3 or nError_CODE == 6 then
			SHARKLE = "local://not-found"
		elseif n_ERROR_CODE == 7 then
			SHARKLE = "local://errors"
		end
		LOCALS["SHARKLE_LAST"] = SHARKLE
		return exe_SHARKLE(SHARKLE)
	end
end

exe_SHARKLE(SHARKLE)
